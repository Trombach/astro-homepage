---
import type { TocItem } from "@utils/generateToc";

type Props = {
  toc: TocItem[];
};

const { toc } = Astro.props;
---

<menu class="mt-3 space-y-1 pl-5 text-sm">
  {
    toc.map(({ slug, text, children }) => {
      return (
        <>
          <li class="px-2 py-1 leading-tight">
            <a
              href={`#${slug}`}
              class="inline-block text-muted-foreground hover:text-foreground"
            >
              {text}
            </a>
          </li>
          {children.length ? <Astro.self toc={children} /> : null}
        </>
      );
    })
  }
</menu>

<script>
  function setActiveHashLink() {
    document
      .querySelector("nav#secondary")
      ?.querySelectorAll("a")
      .forEach((link) => {
        if (link.hash === window.location.hash) {
          link.setAttribute("data-current-url-heading", "");
        } else {
          link.removeAttribute("data-current-url-heading");
        }
      });
  }

  // initial
  setActiveHashLink();

  // when url hash changes
  // use "popstate" since "hashchange" doesn't work with view transitions
  // https://github.com/withastro/astro/issues/10249
  window.addEventListener("popstate", setActiveHashLink);
</script>

<script>
  function setupObserver() {
    const articleHeadings =
      document
        .querySelector("article")
        ?.querySelectorAll("h1, h2, h3, h4, h5, h6") || [];
    const headings = Array.from(articleHeadings).filter(
      (heading) => heading.id !== "",
    );

    // let currentLink: HTMLAnchorElement | undefined = undefined;

    const handleIntersect = (entries: IntersectionObserverEntry[]) => {
      const links = Array.from(
        document.querySelector("nav#secondary")?.querySelectorAll("a") || [],
      );

      // console.log("current link: ", currentLink?.href);

      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const link = links.find(
            (link) => link.hash === `#${entry?.target.id}`,
          );

          // set active link
          link?.setAttribute("data-current-heading", "");

          // set all other links as inactive
          links
            .filter((link) => link.hash !== `#${entry?.target.id}`)
            .forEach((link) => link.removeAttribute("data-current-heading"));
        }
      });
    };

    if (headings.length > 0) {
      const observer = new IntersectionObserver(handleIntersect, {
        threshold: 1,
      });
      headings.forEach((heading) => observer.observe(heading));
    }
  }

  setupObserver();

  document.addEventListener("astro:after-swap", setupObserver);
</script>

<style>
  a[data-current-heading] {
    @apply text-foreground;
  }

  li:has(a[data-current-url-heading]) {
    @apply rounded-lg border border-primary bg-primary/25;
  }
</style>
