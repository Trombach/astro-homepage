---
import DesktopIcon from "icons:astro/heroicons/computer-desktop-16-solid";
import MoonIcon from "icons:astro/heroicons/moon-16-solid";
import SunIcon from "icons:astro/heroicons/sun-16-solid";

export type Theme = "auto" | "dark" | "light";

const options = ["auto", "dark", "light"] as const satisfies Theme[];
---

<fieldset
  class:list={[
    "relative border border-solid flex rounded-full w-fit h-8 box-content",
    "focus-within:outline focus-within:outline-offset-1",
  ]}
>
  <legend class="sr-only">Select a theme</legend>
  {
    options.map((option) => (
      <input
        type="radio"
        name="theme"
        id={`${option}-theme`}
        value={option}
        class:list={[
          "peer fixed top-0 left-0 outline-none m-0 p-0 appearance-none",
          "[&_+_label]:checked:text-foreground",
        ]}
      />
      <label
        for={`${option}-theme`}
        class:list={[
          "h-8 w-8 flex justify-center items-center rounded-full cursor-pointer",
          "transition-all text-muted-foreground hover:text-foreground",
        ]}
      >
        <span class="sr-only">{option} theme</span>
        {option === "auto" && (
          <DesktopIcon id="auto-theme-icon" class="size-4" />
        )}
        {option === "dark" && (
          <MoonIcon id="dark-theme-icon" class="size-4" />
        )}
        {option === "light" && (
          <SunIcon id="light-theme-icon" class="size-4" />
        )}
      </label>
    ))
  }
  <span
    is="theme-highlight"
    class:list={[
      "absolute w-8 h-8 rounded-full border-2 border-primary cursor-pointer",
      "transition-transform duration-300 ease-in-out",
      "peer-[:nth-of-type(2)]:peer-checked:translate-x-full",
      "peer-[:nth-of-type(3)]:peer-checked:translate-x-[200%]",
    ]}></span>
</fieldset>

<script is:inline>
  window.ThemeProvider.initTheme();

  document.addEventListener("astro:before-swap", (event) =>
    window.ThemeProvider.initTheme(event.newDocument),
  );
</script>

<script>
  declare global {
    interface Window {
      ThemeProvider: {
        initTheme: () => void;
        getTheme: () => "auto" | "dark" | "light";
        setTheme: (theme: string) => void;
      };
    }
  }

  function init() {
    const radioButtons = document.querySelectorAll(
      "input[type=radio][name=theme]",
    );
    for (const radioButton of radioButtons) {
      if (radioButton instanceof HTMLInputElement) {
        radioButton.addEventListener("change", () => {
          window.ThemeProvider.setTheme(radioButton.value);
        });
      }
    }
  }

  init();

  document.addEventListener("astro:after-swap", init);

  // react to system theme change
  matchMedia("(prefers-color-scheme: dark)").addEventListener("change", () => {
    if (window.ThemeProvider.getTheme() === "auto") {
      window.ThemeProvider.initTheme();
    }
  });
</script>
