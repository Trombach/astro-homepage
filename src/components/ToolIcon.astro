---
import type { HTMLAttributes } from "astro/types";
import type { Tool } from "src/content.config";

type Props = {
  tool: Tool;
  transitionName: string;
};

const toolMap = {
  Astro: {
    Component: await import("@components/AstroIcon.astro").then(
      (m) => m.default,
    ),
  },
  Svelte: {
    Component: await import("icons:astro/logos/svelte-icon").then(
      (m) => m.default,
    ),
  },
  TypeScript: {
    Component: await import("icons:astro/logos/typescript-icon").then(
      (m) => m.default,
    ),
  },
  Tailwind: {
    Component: await import("icons:astro/logos/tailwindcss-icon").then(
      (m) => m.default,
    ),
  },
  Vercel: {
    Component: await import("icons:astro/logos/vercel-icon").then(
      (m) => m.default,
    ),
    extraProps: { fill: "currentColor" },
  },
  Angular: {
    Component: await import("icons:astro/logos/angular-icon").then(
      (m) => m.default,
    ),
  },
  Sass: {
    Component: await import("icons:astro/logos/sass").then((m) => m.default),
  },
  "AWS Lambda": {
    Component: await import("icons:astro/logos/aws-lambda").then(
      (m) => m.default,
    ),
  },
  Contentful: {
    Component: await import("icons:astro/logos/contentful").then(
      (m) => m.default,
    ),
  },
  Elasticsearch: {
    Component: await import("icons:astro/logos/elasticsearch").then(
      (m) => m.default,
    ),
  },
  LaTeX: {
    Component: await import("icons:astro/simple-icons/latex").then(
      (m) => m.default,
    ),
  },
  "C++": {
    Component: await import("icons:astro/logos/c-plusplus").then(
      (m) => m.default,
    ),
  },
  "Next.js": {
    Component: await import("icons:astro/logos/nextjs-icon").then(
      (m) => m.default,
    ),
  },
  "Monday.com": {
    Component: await import("icons:astro/logos/monday-icon").then(
      (m) => m.default,
    ),
  },
  Supabase: {
    Component: await import("icons:astro/logos/supabase-icon").then(
      (m) => m.default,
    ),
  },
} as const satisfies {
  [key in Tool]: {
    Component: astroHTML.JSX.Element;
    extraProps?: HTMLAttributes<"svg">;
  };
};

const { tool, transitionName } = Astro.props;
const { Component } = toolMap[tool];
const props = {
  width: "100%",
  height: "100%",
  preserveAspectRatio: "xMidYMid meet",
} as const satisfies HTMLAttributes<"svg">;

if ("extraProps" in toolMap[tool]) {
  Object.assign(props, toolMap[tool].extraProps);
}
---

<div title={tool} transition:name={transitionName}>
  <Component {...props}/>
</div>
