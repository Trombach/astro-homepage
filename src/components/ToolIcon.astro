---
import AngularLogo from "icons:astro/logos/angular-icon";
import AwsLambdaLogo from "icons:astro/logos/aws-lambda";
import CppLogo from "icons:astro/logos/c-plusplus";
import ContentfulLogo from "icons:astro/logos/contentful";
import ElasticsearchLogo from "icons:astro/logos/elasticsearch";
import MondayLogo from "icons:astro/logos/monday-icon";
import NextLogo from "icons:astro/logos/nextjs-icon";
import SassLogo from "icons:astro/logos/sass";
import SupabaseLogo from "icons:astro/logos/supabase-icon";
import SvelteLogo from "icons:astro/logos/svelte-icon";
import TailwindLogo from "icons:astro/logos/tailwindcss-icon";
import TypeScriptLogo from "icons:astro/logos/typescript-icon";
import VercelLogo from "icons:astro/logos/vercel-icon";
import LatexLogo from "icons:astro/simple-icons/latex";
import AstroLogo from "@components/AstroIcon.astro";
import type { HTMLAttributes } from "astro/types";
import type { Tool } from "src/content/config";

type Props = {
  tool: Tool;
  transitionName: string;
};

const toolMap = {
  Astro: { Component: AstroLogo },
  Svelte: { Component: SvelteLogo },
  TypeScript: { Component: TypeScriptLogo },
  Tailwind: { Component: TailwindLogo },
  Vercel: { Component: VercelLogo, extraProps: { fill: "currentColor" } },
  Angular: { Component: AngularLogo },
  Sass: { Component: SassLogo },
  "AWS Lambda": { Component: AwsLambdaLogo },
  Contentful: { Component: ContentfulLogo },
  Elasticsearch: { Component: ElasticsearchLogo },
  LaTeX: { Component: LatexLogo },
  "C++": { Component: CppLogo },
  "Next.js": { Component: NextLogo },
  "Monday.com": { Component: MondayLogo },
  Supabase: { Component: SupabaseLogo },
} as const satisfies {
  [key in Tool]: {
    Component: astroHTML.JSX.Element;
    extraProps?: HTMLAttributes<"svg">;
  };
};

const { tool, transitionName } = Astro.props;
const { Component } = toolMap[tool];
const props = {
  width: "100%",
  height: "100%",
  preserveAspectRatio: "xMidYMid meet",
} as const satisfies HTMLAttributes<"svg">;

if ("extraProps" in toolMap[tool]) {
  Object.assign(props, toolMap[tool].extraProps);
}
---

<div title={tool} transition:name={transitionName}>
  <Component {...props}/>
</div>
