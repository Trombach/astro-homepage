---
import { actions } from "astro:actions";
import { getEntry } from "astro:content";
import MailIcon from "icons:astro/heroicons/envelope";
import PaperPlane from "icons:astro/heroicons/paper-airplane";
import LinkedInLogo from "icons:astro/simple-icons/linkedin";
import MatrixLogo from "icons:astro/simple-icons/matrix";
import Avatar from "@components/About/MeCard/Avatar.astro";
import AppLink from "@components/AppLink.astro";
import SendEmailResponse from "@components/Contact/SendEmailResponse.astro";
import Heading from "@components/Heading.astro";
import FormFields from "./FormFields.astro";

const aboutMe = await getEntry("about", "about-me");

if (!aboutMe) {
  throw new Error("About me entry not found");
}

const { person } = aboutMe.data;
const { data } = await getEntry(person);
---

<form
  id="contact-form"
  transition:name="contact-form"
  method="POST"
  action={actions.contact}
  autocomplete="on"
  class="relative mx-auto flex w-full flex-col gap-5 rounded-xl border bg-background px-6 py-3 justify-center md:w-[600px] lg:max-w-screen-lg lg:px-12 lg:py-6"
>
  <Avatar
    image={data.avatar}
    class="size-16 lg:size-24 absolute -right-4 lg:-right-5 -top-5 border-transparent"
  />

  <Heading class="mb-0">Get in Touch</Heading>

  <div class="flex items-center gap-3 justify-start">
    <AppLink
      as="a"
      appearance="secondary"
      target="_blank"
      href=`mailto:${data.contact.email}`
      title="Email me"
    >
      <MailIcon />
    </AppLink>
    <AppLink
      as="a"
      appearance="secondary"
      target="_blank"
      href={data.contact.matrix}
      title="Add me on Matrix"
    >
      <MatrixLogo />
    </AppLink>
    <AppLink
      as="a"
      appearance="secondary"
      target="_blank"
      href={data.contact.linkedIn}
      title="Connect with me on LinkedIn"
    >
      <LinkedInLogo />
    </AppLink>
  </div>

  <SendEmailResponse />

  <FormFields />

  <AppLink disabled id="submit-message" as="button" type="submit" class="self-start">
    Send <PaperPlane />
  </AppLink>
</form>

<script>
  const turnstileScriptId = "turnstile-script";

  function initWidget() {
    const el = document.getElementById("cf-turnstile");
    if (!el) {
      console.error("Could not initialise turnstile widget");
      return;
    }

    if (!el.dataset.sitekey) {
      console.error("sitekey not set");
      return;
    }

    const submitButton = document.getElementById("submit-message");

    turnstile.render(el, {
      appearance: "interaction-only",
      sitekey: el.dataset.sitekey,
      callback: (token) => {
        if (submitButton instanceof HTMLButtonElement) {
          submitButton.disabled = false;
        }
        console.debug(`Challenge Success ${token}`);
      },
    });
  }

  function init() {
    if (document.scripts.namedItem(turnstileScriptId) === null) {
      const form = document.getElementById("contact-form");
      if (form instanceof HTMLFormElement) {
        form.addEventListener(
          "focusin",
          () => {
            const script = document.createElement("script");
            script.src =
              "https://challenges.cloudflare.com/turnstile/v0/api.js?render=explicit";
            script.id = turnstileScriptId;
            script.async = true;
            script.defer = true;
            script.onload = initWidget;

            document.head.appendChild(script);
          },
          { once: true }
        );
      }
    }
  }

  init();
</script>
